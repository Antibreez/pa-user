"use strict";!function(){var e=document.querySelectorAll(".input-file__label");function t(e){var t=e.querySelector("input"),i=e.parentNode.querySelector(".file-load__clear");function n(e){e.preventDefault(),e.stopPropagation()}function o(t){e.classList.add("highlight")}function s(t){e.classList.remove("highlight")}["dragenter","dragover","dragleave","drop"].forEach((function(t){e.addEventListener(t,n,!1)})),["dragenter","dragover"].forEach((function(t){e.addEventListener(t,o,!1)})),["dragleave","drop"].forEach((function(t){e.addEventListener(t,s,!1)})),e.addEventListener("drop",(function(e){var i=e.dataTransfer.files;t.files&&t.files[0]&&(t.value="",/safari/i.test(navigator.userAgent)||(t.type="",t.type="file"));t.files=i,a()}),!1);var a=function(){l(t)},l=function(t){if(t.files&&t.files[0]){var i=new FileReader;i.onload=function(i){e.parentNode.classList.add("loaded"),e.nextElementSibling.querySelector(".file-load__name").textContent=t.files[0].name,window.onInstallationFileDrop&&window.onInstallationFileDrop()},i.readAsDataURL(t.files[0])}};t.addEventListener("change",a),i.addEventListener("click",(function(){e.parentNode.classList.remove("loaded"),t.value="",/safari/i.test(navigator.userAgent)||(t.type="",t.type="file")}))}window.makeFileLoad=t,e[0]&&e.forEach((function(e){t(e)}))}(),function(){var e=.01*window.innerHeight;document.documentElement.style.setProperty("--vh","".concat(e,"px"));var t=document.querySelector("body");function i(e,t){this.trigger=e,this.modal=t,this.overlay=this.modal.querySelector(".modal__overlay"),this.closeBtn=this.modal.querySelector(".modal__close"),this.onOverlayClick=this.onOverlayClick.bind(this),this.onCloseClick=this.onCloseClick.bind(this),this.onTriggerClick=this.onTriggerClick.bind(this),this.onResize=this.onResize.bind(this),this.addEventListeners()}i.prototype.open=function(){this.modal.classList.add("js-show"),t.classList.add("js__body-no-scroll")},i.prototype.close=function(){this.modal.classList.remove("js-show"),t.classList.remove("js__body-no-scroll")},i.prototype.onOverlayClick=function(e){e.target===this.overlay&&this.close()},i.prototype.onCloseClick=function(){this.close()},i.prototype.onTriggerClick=function(){this.open()},i.prototype.onResize=function(){var e=.01*window.innerHeight;document.documentElement.style.setProperty("--vh","".concat(e,"px"))},i.prototype.addEventListeners=function(){var e,t;this.overlay.addEventListener("click",this.onOverlayClick),this.closeBtn.addEventListener("click",this.onCloseClick),this.trigger.addEventListener("click",this.onTriggerClick),window.addEventListener("resize",(e=this.onResize,function(i){t&&clearTimeout(t),t=setTimeout(e,100,i)}))},window.Modal=i}(),function(){var e=document.querySelectorAll(".search"),t=document.querySelectorAll(".search + .search-close");e.forEach((function(e){e.addEventListener("focus",(function(){e.parentNode.parentNode.classList.add("js-focus")}))})),e.forEach((function(e){e.addEventListener("blur",(function(){""===e.value.split(" ").join("")&&(e.value=""),""===e.value||e.classList.contains("js-inputed")||e.classList.add("js-inputed"),""===e.value&&e.classList.contains("js-inputed")&&e.classList.remove("js-inputed")}))})),t.forEach((function(e){e.addEventListener("click",(function(){var t=e.previousElementSibling;t.value="",t.classList.contains("js-inputed")&&t.classList.remove("js-inputed")}))}))}(),function(){var e=document.querySelector(".cloud-status__installation-form");if(e){var t=e.querySelector(".cloud-status__installation-company input"),i=(e.querySelectorAll(".cloud-status__installation-file"),e.querySelector(".input-file__input")),n=e.querySelector(".file-load__clear"),o=e.querySelector(".cloud-status__installation-form-send"),s=function(){return""!==i.value&&""!==t.value},a=function(){s()&&o.hasAttribute("disabled")&&o.removeAttribute("disabled"),s()||!o.hasAttribute("disabled")&&o.setAttribute("disabled","")};window.onInstallationFileDrop=function(){a()},i.addEventListener("change",window.onInstallationFileDrop),n.addEventListener("click",(function(){o.hasAttribute("disabled")||o.setAttribute("disabled","")})),t.addEventListener("input",a)}}(),$(window).load((function(){new Swiper(".menu-pa__container",{freeMode:!0,slidesPerView:"auto",breakpoints:{1280:{freeMode:!0,slidesPerView:"auto",allowTouchMove:!1}}})}));
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1haW4uanMiLCJpbnB1dC1maWxlLmpzIiwibW9kYWwuanMiLCJzZWFyY2guanMiLCJjbG91ZC1pbnN0YWxsYXRpb24uanMiLCJtZW51LXBhLmpzIl0sIm5hbWVzIjpbImZpbGVEcm9wQXJlYSIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvckFsbCIsIm1ha2VGaWxlTG9hZCIsImZpbGVJbnB1dCIsInF1ZXJ5U2VsZWN0b3IiLCJmaWxlQ2xlYXIiLCJwYXJlbnROb2RlIiwicHJldmVudERlZmF1bHRzIiwiZSIsInByZXZlbnREZWZhdWx0Iiwic3RvcFByb3BhZ2F0aW9uIiwiaGlnaGxpZ2h0IiwiY2xhc3NMaXN0IiwiYWRkIiwidW5oaWdobGlnaHQiLCJyZW1vdmUiLCJmb3JFYWNoIiwiZXZlbnROYW1lIiwiYWRkRXZlbnRMaXN0ZW5lciIsImZpbGVzIiwiZGF0YVRyYW5zZmVyIiwidmFsdWUiLCJ0ZXN0IiwibmF2aWdhdG9yIiwidXNlckFnZW50IiwidHlwZSIsIm9uRmlsZUNoYW5nZSIsInJlYWRVcmwiLCJpbnB1dCIsInJlYWRlciIsIkZpbGVSZWFkZXIiLCJvbmxvYWQiLCJuZXh0RWxlbWVudFNpYmxpbmciLCJ0ZXh0Q29udGVudCIsIm5hbWUiLCJ3aW5kb3ciLCJvbkluc3RhbGxhdGlvbkZpbGVEcm9wIiwicmVhZEFzRGF0YVVSTCIsIml0ZW0iLCJ2aCIsImlubmVySGVpZ2h0IiwiZG9jdW1lbnRFbGVtZW50Iiwic3R5bGUiLCJzZXRQcm9wZXJ0eSIsImNvbmNhdCIsIiRib2R5IiwiTW9kYWwiLCJ0cmlnZ2VyIiwibW9kYWwiLCJ0aGlzIiwib3ZlcmxheSIsImNsb3NlQnRuIiwib25PdmVybGF5Q2xpY2siLCJiaW5kIiwib25DbG9zZUNsaWNrIiwib25UcmlnZ2VyQ2xpY2siLCJvblJlc2l6ZSIsImFkZEV2ZW50TGlzdGVuZXJzIiwicHJvdG90eXBlIiwib3BlbiIsImNsb3NlIiwidGFyZ2V0IiwiZnVuYyIsInRpbWVyIiwiZXZlbnQiLCJjbGVhclRpbWVvdXQiLCJzZXRUaW1lb3V0IiwiaXRlbXMiLCJzcGxpdCIsImpvaW4iLCJjb250YWlucyIsInNlYXJjaCIsInByZXZpb3VzRWxlbWVudFNpYmxpbmciLCJmb3JtIiwiY29tcGFueSIsInNlbmRCdG4iLCJpc0Zvcm1GaWxsZWQiLCJjaGVja0lucHV0cyIsImhhc0F0dHJpYnV0ZSIsInJlbW92ZUF0dHJpYnV0ZSIsInNldEF0dHJpYnV0ZSIsIiQiLCJsb2FkIiwiU3dpcGVyIiwiZnJlZU1vZGUiLCJzbGlkZXNQZXJWaWV3IiwiYnJlYWtwb2ludHMiLCIxMjgwIiwiYWxsb3dUb3VjaE1vdmUiXSwibWFwcGluZ3MiOiJBQUFBLGNDQUEsV0FDQSxJQUFBQSxFQUFBQyxTQUFBQyxpQkFBQSxzQkFFQSxTQUFBQyxFQUFBSCxHQUNBLElBQUFJLEVBQUFKLEVBQUFLLGNBQUEsU0FDQUMsRUFBQU4sRUFBQU8sV0FBQUYsY0FBQSxxQkFPQSxTQUFBRyxFQUFBQyxHQUNBQSxFQUFBQyxpQkFDQUQsRUFBQUUsa0JBYUEsU0FBQUMsRUFBQUgsR0FDQVQsRUFBQWEsVUFBQUMsSUFBQSxhQUdBLFNBQUFDLEVBQUFOLEdBQ0FULEVBQUFhLFVBQUFHLE9BQUEsYUF4QkEsQ0FBQSxZQUFBLFdBQUEsWUFBQSxRQUFBQyxTQUFBLFNBQUFDLEdBQ0FsQixFQUFBbUIsaUJBQUFELEVBQUFWLEdBQUEsTUFVQSxDQUFBLFlBQUEsWUFBQVMsU0FBQSxTQUFBQyxHQUNBbEIsRUFBQW1CLGlCQUFBRCxFQUFBTixHQUFBLE1BR0EsQ0FBQSxZQUFBLFFBQUFLLFNBQUEsU0FBQUMsR0FDQWxCLEVBQUFtQixpQkFBQUQsRUFBQUgsR0FBQSxNQWFBZixFQUFBbUIsaUJBQUEsUUFFQSxTQUFBVixHQUNBLElBQ0FXLEVBREFYLEVBQUFZLGFBQ0FELE1BRUFoQixFQUFBZ0IsT0FBQWhCLEVBQUFnQixNQUFBLEtBQ0FoQixFQUFBa0IsTUFBQSxHQUVBLFVBQUFDLEtBQUFDLFVBQUFDLGFBQ0FyQixFQUFBc0IsS0FBQSxHQUNBdEIsRUFBQXNCLEtB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QStDLE1BQUEsV0FDQSxJQUFBQyxPQUFBLHNCQUFBLENBQ0FDLFVBQUEsRUFDQUMsY0FBQSxPQUNBQyxZQUFBLENBRUFDLEtBQUEsQ0FDQUgsVUFBQSxFQUNBQyxjQUFBLE9BQ0FHLGdCQUFBIiwiZmlsZSI6Im1haW4ubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbihmdW5jdGlvbiAoKSB7XG4gIHZhciBmaWxlRHJvcEFyZWEgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuaW5wdXQtZmlsZV9fbGFiZWwnKTtcblxuICBmdW5jdGlvbiBtYWtlRmlsZUxvYWQoZmlsZURyb3BBcmVhKSB7XG4gICAgdmFyIGZpbGVJbnB1dCA9IGZpbGVEcm9wQXJlYS5xdWVyeVNlbGVjdG9yKCdpbnB1dCcpO1xuICAgIHZhciBmaWxlQ2xlYXIgPSBmaWxlRHJvcEFyZWEucGFyZW50Tm9kZS5xdWVyeVNlbGVjdG9yKCcuZmlsZS1sb2FkX19jbGVhcicpOyAvLyDQodCx0YDQsNGB0YvQstCw0LXQvCDRgdGC0LDQvdC00LDRgNGC0L3Ri9C1INGB0L7QsdGL0YLQuNGPINC/0YDQuCDQv9C10YDQtdGC0LDRgdC60LjQstCw0L3QuNC4INGE0LDQudC70LBcblxuICAgIFsnZHJhZ2VudGVyJywgJ2RyYWdvdmVyJywgJ2RyYWdsZWF2ZScsICdkcm9wJ10uZm9yRWFjaChmdW5jdGlvbiAoZXZlbnROYW1lKSB7XG4gICAgICBmaWxlRHJvcEFyZWEuYWRkRXZlbnRMaXN0ZW5lcihldmVudE5hbWUsIHByZXZlbnREZWZhdWx0cywgZmFsc2UpO1xuICAgIH0pO1xuXG4gICAgZnVuY3Rpb24gcHJldmVudERlZmF1bHRzKGUpIHtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgfVxuXG4gICAgOyAvLyDQlNC+0LHQsNCy0LvRj9C10Lwg0YHRgtC40LvQuCDQv9GA0Lgg0L/QtdGA0LXRgtCw0YHQutC40LLQsNC90LjQuCDRhNCw0LnQu9CwINC90LDQtCDQvdGD0LbQvdC+0Lkg0L7QsdC70LDRgdGC0YzRjlxuXG4gICAgWydkcmFnZW50ZXInLCAnZHJhZ292ZXInXS5mb3JFYWNoKGZ1bmN0aW9uIChldmVudE5hbWUpIHtcbiAgICAgIGZpbGVEcm9wQXJlYS5hZGRFdmVudExpc3RlbmVyKGV2ZW50TmFtZSwgaGlnaGxpZ2h0LCBmYWxzZSk7XG4gICAgfSk7XG4gICAgWydkcmFnbGVhdmUnLCAnZHJvcCddLmZvckVhY2goZnVuY3Rpb24gKGV2ZW50TmFtZSkge1xuICAgICAgZmlsZURyb3BBcmVhLmFkZEV2ZW50TGlzdGVuZXIoZXZlbnROYW1lLCB1bmhpZ2hsaWdodCwgZmFsc2UpO1xuICAgIH0pO1xuXG4gICAgZnVuY3Rpb24gaGlnaGxpZ2h0KGUpIHtcbiAgICAgIGZpbGVEcm9wQXJlYS5jbGFzc0xpc3QuYWRkKCdoaWdobGlnaHQnKTtcbiAgICB9XG5cbiAgICA7XG5cbiAgICBmdW5jdGlvbiB1bmhpZ2hsaWdodChlKSB7XG4gICAgICBmaWxlRHJvcEFyZWEuY2xhc3NMaXN0LnJlbW92ZSgnaGlnaGxpZ2h0Jyk7XG4gICAgfVxuXG4gICAgOyAvL1xuXG4gICAgZmlsZURyb3BBcmVhLmFkZEV2ZW50TGlzdGVuZXIoJ2Ryb3AnLCBoYW5kbGVEcm9wLCBmYWxzZSk7XG5cbiAgICBmdW5jdGlvbiBoYW5kbGVEcm9wKGUpIHtcbiAgICAgIHZhciBkdCA9IGUuZGF0YVRyYW5zZmVyO1xuICAgICAgdmFyIGZpbGVzID0gZHQuZmlsZXM7XG5cbiAgICAgIGlmIChmaWxlSW5wdXQuZmlsZXMgJiYgZmlsZUlucHV0LmZpbGVzWzBdKSB7XG4gICAgICAgIGZpbGVJbnB1dC52YWx1ZSA9ICcnO1xuXG4gICAgICAgIGlmICghL3NhZmFyaS9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCkpIHtcbiAgICAgICAgICBmaWxlSW5wdXQudHlwZSA9ICcnO1xuICAgICAgICAgIGZpbGVJbnB1dC50eXBlID0gJ2ZpbGUnO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGZpbGVJbnB1dC5maWxlcyA9IGZpbGVzO1xuICAgICAgb25GaWxlQ2hhbmdlKCk7XG4gICAgfVxuXG4gICAgO1xuXG4gICAgdmFyIG9uRmlsZUNoYW5nZSA9IGZ1bmN0aW9uIG9uRmlsZUNoYW5nZSgpIHtcbiAgICAgIHJlYWRVcmwoZmlsZUlucHV0KTtcbiAgICB9O1xuXG4gICAgdmFyIHJlYWRVcmwgPSBmdW5jdGlvbiByZWFkVXJsKGlucHV0KSB7XG4gICAgICBpZiAoaW5wdXQuZmlsZXMgJiYgaW5wdXQuZmlsZXNbMF0pIHtcbiAgICAgICAgdmFyIHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7XG5cbiAgICAgICAgcmVhZGVyLm9ubG9hZCA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgZmlsZURyb3BBcmVhLnBhcmVudE5vZGUuY2xhc3NMaXN0LmFkZCgnbG9hZGVkJyk7XG4gICAgICAgICAgZmlsZURyb3BBcmVhLm5leHRFbGVtZW50U2libGluZy5xdWVyeVNlbGVjdG9yKCcuZmlsZS1sb2FkX19uYW1lJykudGV4dENvbnRlbnQgPSBpbnB1dC5maWxlc1swXS5uYW1lO1xuICAgICAgICAgIHdpbmRvdy5vbkluc3RhbGxhdGlvbkZpbGVEcm9wICYmIHdpbmRvdy5vbkluc3RhbGxhdGlvbkZpbGVEcm9wKCk7XG4gICAgICAgIH07XG5cbiAgICAgICAgcmVhZGVyLnJlYWRBc0RhdGFVUkwoaW5wdXQuZmlsZXNbMF0pO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBmdW5jdGlvbiBvbkNsZWFyKCkge1xuICAgICAgZmlsZURyb3BBcmVhLnBhcmVudE5vZGUuY2xhc3NMaXN0LnJlbW92ZSgnbG9hZGVkJyk7XG4gICAgICBmaWxlSW5wdXQudmFsdWUgPSAnJztcblxuICAgICAgaWYgKCEvc2FmYXJpL2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KSkge1xuICAgICAgICBmaWxlSW5wdXQudHlwZSA9ICcnO1xuICAgICAgICBmaWxlSW5wdXQudHlwZSA9ICdmaWxlJztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmaWxlSW5wdXQuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgb25GaWxlQ2hhbmdlKTtcbiAgICBmaWxlQ2xlYXIuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBvbkNsZWFyKTtcbiAgfVxuXG4gIHdpbmRvdy5tYWtlRmlsZUxvYWQgPSBtYWtlRmlsZUxvYWQ7XG5cbiAgaWYgKCFmaWxlRHJvcEFyZWFbMF0pIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBmaWxlRHJvcEFyZWEuZm9yRWFjaChmdW5jdGlvbiAoaXRlbSkge1xuICAgIG1ha2VGaWxlTG9hZChpdGVtKTtcbiAgfSk7XG59KSgpO1xuXG4oZnVuY3Rpb24gKCkge1xuICB2YXIgdmggPSB3aW5kb3cuaW5uZXJIZWlnaHQgKiAwLjAxO1xuICBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc3R5bGUuc2V0UHJvcGVydHkoJy0tdmgnLCBcIlwiLmNvbmNhdCh2aCwgXCJweFwiKSk7XG4gIHZhciAkYm9keSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2JvZHknKTtcblxuICBmdW5jdGlvbiBkZWJvdW5jZShmdW5jKSB7XG4gICAgdmFyIHRpbWVyO1xuICAgIHJldHVybiBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIGlmICh0aW1lcikgY2xlYXJUaW1lb3V0KHRpbWVyKTtcbiAgICAgIHRpbWVyID0gc2V0VGltZW91dChmdW5jLCAxMDAsIGV2ZW50KTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gTW9kYWwodHJpZ2dlciwgbW9kYWwpIHtcbiAgICB0aGlzLnRyaWdnZXIgPSB0cmlnZ2VyO1xuICAgIHRoaXMubW9kYWwgPSBtb2RhbDtcbiAgICB0aGlzLm92ZXJsYXkgPSB0aGlzLm1vZGFsLnF1ZXJ5U2VsZWN0b3IoJy5tb2RhbF9fb3ZlcmxheScpO1xuICAgIHRoaXMuY2xvc2VCdG4gPSB0aGlzLm1vZGFsLnF1ZXJ5U2VsZWN0b3IoJy5tb2RhbF9fY2xvc2UnKTtcbiAgICB0aGlzLm9uT3ZlcmxheUNsaWNrID0gdGhpcy5vbk92ZXJsYXlDbGljay5iaW5kKHRoaXMpO1xuICAgIHRoaXMub25DbG9zZUNsaWNrID0gdGhpcy5vbkNsb3NlQ2xpY2suYmluZCh0aGlzKTtcbiAgICB0aGlzLm9uVHJpZ2dlckNsaWNrID0gdGhpcy5vblRyaWdnZXJDbGljay5iaW5kKHRoaXMpO1xuICAgIHRoaXMub25SZXNpemUgPSB0aGlzLm9uUmVzaXplLmJpbmQodGhpcyk7XG4gICAgdGhpcy5hZGRFdmVudExpc3RlbmVycygpO1xuICB9XG5cbiAgTW9kYWwucHJvdG90eXBlLm9wZW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5tb2RhbC5jbGFzc0xpc3QuYWRkKCdqcy1zaG93Jyk7XG4gICAgJGJvZHkuY2xhc3NMaXN0LmFkZCgnanNfX2JvZHktbm8tc2Nyb2xsJyk7XG4gIH07XG5cbiAgTW9kYWwucHJvdG90eXBlLmNsb3NlID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMubW9kYWwuY2xhc3NMaXN0LnJlbW92ZSgnanMtc2hvdycpO1xuICAgICRib2R5LmNsYXNzTGlzdC5yZW1vdmUoJ2pzX19ib2R5LW5vLXNjcm9sbCcpO1xuICB9O1xuXG4gIE1vZGFsLnByb3RvdHlwZS5vbk92ZXJsYXlDbGljayA9IGZ1bmN0aW9uIChlKSB7XG4gICAgaWYgKGUudGFyZ2V0ID09PSB0aGlzLm92ZXJsYXkpIHtcbiAgICAgIHRoaXMuY2xvc2UoKTtcbiAgICB9XG4gIH07XG5cbiAgTW9kYWwucHJvdG90eXBlLm9uQ2xvc2VDbGljayA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmNsb3NlKCk7XG4gIH07XG5cbiAgTW9kYWwucHJvdG90eXBlLm9uVHJpZ2dlckNsaWNrID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMub3BlbigpO1xuICB9O1xuXG4gIE1vZGFsLnByb3RvdHlwZS5vblJlc2l6ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdmggPSB3aW5kb3cuaW5uZXJIZWlnaHQgKiAwLjAxO1xuICAgIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zdHlsZS5zZXRQcm9wZXJ0eSgnLS12aCcsIFwiXCIuY29uY2F0KHZoLCBcInB4XCIpKTtcbiAgfTtcblxuICBNb2RhbC5wcm90b3R5cGUuYWRkRXZlbnRMaXN0ZW5lcnMgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5vdmVybGF5LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5vbk92ZXJsYXlDbGljayk7XG4gICAgdGhpcy5jbG9zZUJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMub25DbG9zZUNsaWNrKTtcbiAgICB0aGlzLnRyaWdnZXIuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLm9uVHJpZ2dlckNsaWNrKTtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgZGVib3VuY2UodGhpcy5vblJlc2l6ZSkpO1xuICB9O1xuXG4gIHdpbmRvdy5Nb2RhbCA9IE1vZGFsO1xufSkoKTtcblxuKGZ1bmN0aW9uICgpIHtcbiAgdmFyIGl0ZW1zID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLnNlYXJjaCcpO1xuICB2YXIgY2xvc2UgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuc2VhcmNoICsgLnNlYXJjaC1jbG9zZScpO1xuICBpdGVtcy5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgaXRlbS5hZGRFdmVudExpc3RlbmVyKCdmb2N1cycsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGl0ZW0ucGFyZW50Tm9kZS5wYXJlbnROb2RlLmNsYXNzTGlzdC5hZGQoJ2pzLWZvY3VzJyk7XG4gICAgfSk7XG4gIH0pO1xuICBpdGVtcy5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgaXRlbS5hZGRFdmVudExpc3RlbmVyKCdibHVyJywgZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKGl0ZW0udmFsdWUuc3BsaXQoJyAnKS5qb2luKCcnKSA9PT0gJycpIHtcbiAgICAgICAgaXRlbS52YWx1ZSA9ICcnO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXRlbS52YWx1ZSAhPT0gJycgJiYgIWl0ZW0uY2xhc3NMaXN0LmNvbnRhaW5zKCdqcy1pbnB1dGVkJykpIHtcbiAgICAgICAgaXRlbS5jbGFzc0xpc3QuYWRkKCdqcy1pbnB1dGVkJyk7XG4gICAgICB9XG5cbiAgICAgIGlmIChpdGVtLnZhbHVlID09PSAnJyAmJiBpdGVtLmNsYXNzTGlzdC5jb250YWlucygnanMtaW5wdXRlZCcpKSB7XG4gICAgICAgIGl0ZW0uY2xhc3NMaXN0LnJlbW92ZSgnanMtaW5wdXRlZCcpO1xuICAgICAgfVxuICAgIH0pO1xuICB9KTtcbiAgY2xvc2UuZm9yRWFjaChmdW5jdGlvbiAoaXRlbSkge1xuICAgIGl0ZW0uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgc2VhcmNoID0gaXRlbS5wcmV2aW91c0VsZW1lbnRTaWJsaW5nO1xuICAgICAgc2VhcmNoLnZhbHVlID0gJyc7XG5cbiAgICAgIGlmIChzZWFyY2guY2xhc3NMaXN0LmNvbnRhaW5zKCdqcy1pbnB1dGVkJykpIHtcbiAgICAgICAgc2VhcmNoLmNsYXNzTGlzdC5yZW1vdmUoJ2pzLWlucHV0ZWQnKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSk7XG59KSgpO1xuXG4oZnVuY3Rpb24gKCkge1xuICB2YXIgZm9ybSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5jbG91ZC1zdGF0dXNfX2luc3RhbGxhdGlvbi1mb3JtJyk7XG5cbiAgaWYgKCFmb3JtKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIGNvbXBhbnkgPSBmb3JtLnF1ZXJ5U2VsZWN0b3IoJy5jbG91ZC1zdGF0dXNfX2luc3RhbGxhdGlvbi1jb21wYW55IGlucHV0Jyk7XG4gIHZhciBmaWxlSW5wdXRCbG9jayA9IGZvcm0ucXVlcnlTZWxlY3RvckFsbCgnLmNsb3VkLXN0YXR1c19faW5zdGFsbGF0aW9uLWZpbGUnKTtcbiAgdmFyIGZpbGVJbnB1dCA9IGZvcm0ucXVlcnlTZWxlY3RvcignLmlucHV0LWZpbGVfX2lucHV0Jyk7XG4gIHZhciBmaWxlQ2xlYXIgPSBmb3JtLnF1ZXJ5U2VsZWN0b3IoJy5maWxlLWxvYWRfX2NsZWFyJyk7XG4gIHZhciBzZW5kQnRuID0gZm9ybS5xdWVyeVNlbGVjdG9yKCcuY2xvdWQtc3RhdHVzX19pbnN0YWxsYXRpb24tZm9ybS1zZW5kJyk7XG5cbiAgdmFyIGlzRm9ybUZpbGxlZCA9IGZ1bmN0aW9uIGlzRm9ybUZpbGxlZCgpIHtcbiAgICB2YXIgZmlsbGVkID0gdHJ1ZTtcblxuICAgIGlmIChmaWxlSW5wdXQudmFsdWUgPT09ICcnIHx8IGNvbXBhbnkudmFsdWUgPT09ICcnKSB7XG4gICAgICBmaWxsZWQgPSBmYWxzZTtcbiAgICB9IGVsc2Uge1xuICAgICAgZmlsbGVkID0gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gZmlsbGVkO1xuICB9O1xuXG4gIHZhciBjaGVja0lucHV0cyA9IGZ1bmN0aW9uIGNoZWNrSW5wdXRzKCkge1xuICAgIGlmIChpc0Zvcm1GaWxsZWQoKSkge1xuICAgICAgc2VuZEJ0bi5oYXNBdHRyaWJ1dGUoJ2Rpc2FibGVkJykgJiYgc2VuZEJ0bi5yZW1vdmVBdHRyaWJ1dGUoJ2Rpc2FibGVkJyk7XG4gICAgfVxuXG4gICAgaWYgKCFpc0Zvcm1GaWxsZWQoKSkge1xuICAgICAgIXNlbmRCdG4uaGFzQXR0cmlidXRlKCdkaXNhYmxlZCcpICYmIHNlbmRCdG4uc2V0QXR0cmlidXRlKCdkaXNhYmxlZCcsICcnKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIG9uRmlsZUNsZWFyID0gZnVuY3Rpb24gb25GaWxlQ2xlYXIoKSB7XG4gICAgaWYgKCFzZW5kQnRuLmhhc0F0dHJpYnV0ZSgnZGlzYWJsZWQnKSkge1xuICAgICAgc2VuZEJ0bi5zZXRBdHRyaWJ1dGUoJ2Rpc2FibGVkJywgJycpO1xuICAgIH1cbiAgfTtcblxuICB3aW5kb3cub25JbnN0YWxsYXRpb25GaWxlRHJvcCA9IGZ1bmN0aW9uICgpIHtcbiAgICBjaGVja0lucHV0cygpO1xuICB9O1xuXG4gIGZpbGVJbnB1dC5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCB3aW5kb3cub25JbnN0YWxsYXRpb25GaWxlRHJvcCk7XG4gIGZpbGVDbGVhci5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIG9uRmlsZUNsZWFyKTtcbiAgY29tcGFueS5hZGRFdmVudExpc3RlbmVyKCdpbnB1dCcsIGNoZWNrSW5wdXRzKTtcbn0pKCk7XG5cbihmdW5jdGlvbiAoKSB7XG4gICQod2luZG93KS5sb2FkKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgc3dpcGVyID0gbmV3IFN3aXBlcignLm1lbnUtcGFfX2NvbnRhaW5lcicsIHtcbiAgICAgIGZyZWVNb2RlOiB0cnVlLFxuICAgICAgc2xpZGVzUGVyVmlldzogJ2F1dG8nLFxuICAgICAgYnJlYWtwb2ludHM6IHtcbiAgICAgICAgMTI4MDoge1xuICAgICAgICAgIGZyZWVNb2RlOiB0cnVlLFxuICAgICAgICAgIHNsaWRlc1BlclZpZXc6ICdhdXRvJyxcbiAgICAgICAgICBhbGxvd1RvdWNoTW92ZTogZmFsc2VcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICB9KTtcbn0pKCk7IiwiKGZ1bmN0aW9uKCkge1xuICBjb25zdCBmaWxlRHJvcEFyZWEgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuaW5wdXQtZmlsZV9fbGFiZWwnKTtcblxuICBmdW5jdGlvbiBtYWtlRmlsZUxvYWQoZmlsZURyb3BBcmVhKSB7XG4gICAgY29uc3QgZmlsZUlucHV0ID0gZmlsZURyb3BBcmVhLnF1ZXJ5U2VsZWN0b3IoJ2lucHV0Jyk7XG4gICAgY29uc3QgZmlsZUNsZWFyID0gZmlsZURyb3BBcmVhLnBhcmVudE5vZGUucXVlcnlTZWxlY3RvcignLmZpbGUtbG9hZF9fY2xlYXInKTtcbiAgICAvLyDQodCx0YDQsNGB0YvQstCw0LXQvCDRgdGC0LDQvdC00LDRgNGC0L3Ri9C1INGB0L7QsdGL0YLQuNGPINC/0YDQuCDQv9C10YDQtdGC0LDRgdC60LjQstCw0L3QuNC4INGE0LDQudC70LBcblxuICAgIFsnZHJhZ2VudGVyJywgJ2RyYWdvdmVyJywgJ2RyYWdsZWF2ZScsICdkcm9wJ10uZm9yRWFjaChldmVudE5hbWUgPT4ge1xuICAgICAgZmlsZURyb3BBcmVhLmFkZEV2ZW50TGlzdGVuZXIoZXZlbnROYW1lLCBwcmV2ZW50RGVmYXVsdHMsIGZhbHNlKVxuICAgIH0pO1xuXG4gICAgZnVuY3Rpb24gcHJldmVudERlZmF1bHRzIChlKSB7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIH07XG5cbiAgICAvLyDQlNC+0LHQsNCy0LvRj9C10Lwg0YHRgtC40LvQuCDQv9GA0Lgg0L/QtdGA0LXRgtCw0YHQutC40LLQsNC90LjQuCDRhNCw0LnQu9CwINC90LDQtCDQvdGD0LbQvdC+0Lkg0L7QsdC70LDRgdGC0YzRjlxuXG4gICAgWydkcmFnZW50ZXInLCAnZHJhZ292ZXInXS5mb3JFYWNoKGV2ZW50TmFtZSA9PiB7XG4gICAgICBmaWxlRHJvcEFyZWEuYWRkRXZlbnRMaXN0ZW5lcihldmVudE5hbWUsIGhpZ2hsaWdodCwgZmFsc2UpXG4gICAgfSk7XG5cbiAgICBbJ2RyYWdsZWF2ZScsICdkcm9wJ10uZm9yRWFjaChldmVudE5hbWUgPT4ge1xuICAgICAgZmlsZURyb3BBcmVhLmFkZEV2ZW50TGlzdGVuZXIoZXZlbnROYW1lLCB1bmhpZ2hsaWdodCwgZmFsc2UpXG4gICAgfSlcblxuICAgIGZ1bmN0aW9uIGhpZ2hsaWdodChlKSB7XG4gICAgICBmaWxlRHJvcEFyZWEuY2xhc3NMaXN0LmFkZCgnaGlnaGxpZ2h0Jyk7XG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIHVuaGlnaGxpZ2h0KGUpIHtcbiAgICAgIGZpbGVEcm9wQXJlYS5jbGFzc0xpc3QucmVtb3ZlKCdoaWdobGlnaHQnKTtcbiAgICB9O1xuXG4gICAgLy9cblxuICAgIGZpbGVEcm9wQXJlYS5hZGRFdmVudExpc3RlbmVyKCdkcm9wJywgaGFuZGxlRHJvcCwgZmFsc2UpXG5cbiAgICBmdW5jdGlvbiBoYW5kbGVEcm9wKGUpIHtcbiAgICAgIGxldCBkdCA9IGUuZGF0YVRyYW5zZmVyXG4gICAgICBsZXQgZmlsZXMgPSBkdC5maWxlc1xuXG4gICAgICBpZiAoZmlsZUlucHV0LmZpbGVzICYmIGZpbGVJbnB1dC5maWxlc1swXSkge1xuICAgICAgICBmaWxlSW5wdXQudmFsdWUgPSAnJztcblxuICAgICAgICBpZighL3NhZmFyaS9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCkpe1xuICAgICAgICAgIGZpbGVJbnB1dC50eXBlID0gJyc7XG4gICAgICAgICAgZmlsZUlucHV0LnR5cGUgPSAnZmlsZSc7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgZmlsZUlucHV0LmZpbGVzID0gZmlsZXM7XG4gICAgICBvbkZpbGVDaGFuZ2UoKTtcblxuICAgIH07XG5cbiAgICBjb25zdCBvbkZpbGVDaGFuZ2UgPSAoKSA9PiB7XG4gICAgICByZWFkVXJsKGZpbGVJbnB1dCk7XG4gICAgfVxuXG4gICAgY29uc3QgcmVhZFVybCA9IChpbnB1dCkgPT4ge1xuICAgICAgaWYgKGlucHV0LmZpbGVzICYmIGlucHV0LmZpbGVzWzBdKSB7XG4gICAgICAgIHZhciByZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpO1xuXG4gICAgICAgIHJlYWRlci5vbmxvYWQgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgIGZpbGVEcm9wQXJlYS5wYXJlbnROb2RlLmNsYXNzTGlzdC5hZGQoJ2xvYWRlZCcpO1xuICAgICAgICAgIGZpbGVEcm9wQXJlYVxuICAgICAgICAgICAgLm5leHRFbGVtZW50U2libGluZ1xuICAgICAgICAgICAgLnF1ZXJ5U2VsZWN0b3IoJy5maWxlLWxvYWRfX25hbWUnKVxuICAgICAgICAgICAgLnRleHRDb250ZW50ID0gaW5wdXQuZmlsZXNbMF0ubmFtZTtcbiAgICAgICAgICAgIHdpbmRvdy5vbkluc3RhbGxhdGlvbkZpbGVEcm9wICYmIHdpbmRvdy5vbkluc3RhbGxhdGlvbkZpbGVEcm9wKCk7XG4gICAgICAgIH1cblxuICAgICAgICByZWFkZXIucmVhZEFzRGF0YVVSTChpbnB1dC5maWxlc1swXSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gb25DbGVhcigpIHtcbiAgICAgIGZpbGVEcm9wQXJlYS5wYXJlbnROb2RlLmNsYXNzTGlzdC5yZW1vdmUoJ2xvYWRlZCcpO1xuXG4gICAgICBmaWxlSW5wdXQudmFsdWUgPSAnJztcblxuICAgICAgaWYoIS9zYWZhcmkvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpKXtcbiAgICAgICAgZmlsZUlucHV0LnR5cGUgPSAnJztcbiAgICAgICAgZmlsZUlucHV0LnR5cGUgPSAnZmlsZSc7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZmlsZUlucHV0LmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIG9uRmlsZUNoYW5nZSk7XG4gICAgZmlsZUNsZWFyLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgb25DbGVhcik7XG4gIH1cblxuICB3aW5kb3cubWFrZUZpbGVMb2FkID0gbWFrZUZpbGVMb2FkO1xuXG5cbiAgaWYgKCFmaWxlRHJvcEFyZWFbMF0pIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBmaWxlRHJvcEFyZWEuZm9yRWFjaChmdW5jdGlvbihpdGVtKSB7XG4gICAgbWFrZUZpbGVMb2FkKGl0ZW0pO1xuICB9KTtcbn0pKCk7XG4iLCIoKCkgPT4ge1xuICBsZXQgdmggPSB3aW5kb3cuaW5uZXJIZWlnaHQgKiAwLjAxO1xuICBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc3R5bGUuc2V0UHJvcGVydHkoJy0tdmgnLCBgJHt2aH1weGApO1xuXG4gIGNvbnN0ICRib2R5ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignYm9keScpO1xuXG4gIGZ1bmN0aW9uIGRlYm91bmNlKGZ1bmMpe1xuICAgIHZhciB0aW1lcjtcbiAgICByZXR1cm4gZnVuY3Rpb24oZXZlbnQpe1xuICAgICAgaWYodGltZXIpIGNsZWFyVGltZW91dCh0aW1lcik7XG4gICAgICB0aW1lciA9IHNldFRpbWVvdXQoZnVuYywxMDAsZXZlbnQpO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBNb2RhbCAodHJpZ2dlciwgbW9kYWwpIHtcbiAgICB0aGlzLnRyaWdnZXIgPSB0cmlnZ2VyO1xuICAgIHRoaXMubW9kYWwgPSBtb2RhbDtcbiAgICB0aGlzLm92ZXJsYXkgPSB0aGlzLm1vZGFsLnF1ZXJ5U2VsZWN0b3IoJy5tb2RhbF9fb3ZlcmxheScpO1xuICAgIHRoaXMuY2xvc2VCdG4gPSB0aGlzLm1vZGFsLnF1ZXJ5U2VsZWN0b3IoJy5tb2RhbF9fY2xvc2UnKTtcblxuICAgIHRoaXMub25PdmVybGF5Q2xpY2sgPSB0aGlzLm9uT3ZlcmxheUNsaWNrLmJpbmQodGhpcyk7XG4gICAgdGhpcy5vbkNsb3NlQ2xpY2sgPSB0aGlzLm9uQ2xvc2VDbGljay5iaW5kKHRoaXMpO1xuICAgIHRoaXMub25UcmlnZ2VyQ2xpY2sgPSB0aGlzLm9uVHJpZ2dlckNsaWNrLmJpbmQodGhpcyk7XG4gICAgdGhpcy5vblJlc2l6ZSA9IHRoaXMub25SZXNpemUuYmluZCh0aGlzKTtcblxuICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcnMoKTtcbiAgfVxuXG4gIE1vZGFsLnByb3RvdHlwZS5vcGVuID0gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5tb2RhbC5jbGFzc0xpc3QuYWRkKCdqcy1zaG93Jyk7XG4gICAgJGJvZHkuY2xhc3NMaXN0LmFkZCgnanNfX2JvZHktbm8tc2Nyb2xsJyk7XG4gIH1cblxuICBNb2RhbC5wcm90b3R5cGUuY2xvc2UgPSBmdW5jdGlvbigpIHtcbiAgICB0aGlzLm1vZGFsLmNsYXNzTGlzdC5yZW1vdmUoJ2pzLXNob3cnKTtcbiAgICAkYm9keS5jbGFzc0xpc3QucmVtb3ZlKCdqc19fYm9keS1uby1zY3JvbGwnKTtcbiAgfVxuXG4gIE1vZGFsLnByb3RvdHlwZS5vbk92ZXJsYXlDbGljayA9IGZ1bmN0aW9uKGUpIHtcbiAgICBpZiAoZS50YXJnZXQgPT09IHRoaXMub3ZlcmxheSkge1xuICAgICAgdGhpcy5jbG9zZSgpO1xuICAgIH1cbiAgfVxuXG4gIE1vZGFsLnByb3RvdHlwZS5vbkNsb3NlQ2xpY2sgPSBmdW5jdGlvbigpIHtcbiAgICB0aGlzLmNsb3NlKCk7XG4gIH1cblxuICBNb2RhbC5wcm90b3R5cGUub25UcmlnZ2VyQ2xpY2sgPSBmdW5jdGlvbigpIHtcbiAgICB0aGlzLm9wZW4oKTtcbiAgfVxuXG4gIE1vZGFsLnByb3RvdHlwZS5vblJlc2l6ZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgbGV0IHZoID0gd2luZG93LmlubmVySGVpZ2h0ICogMC4wMTtcbiAgICAgIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zdHlsZS5zZXRQcm9wZXJ0eSgnLS12aCcsIGAke3ZofXB4YCk7XG4gIH07XG5cbiAgTW9kYWwucHJvdG90eXBlLmFkZEV2ZW50TGlzdGVuZXJzID0gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5vdmVybGF5LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5vbk92ZXJsYXlDbGljayk7XG4gICAgdGhpcy5jbG9zZUJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMub25DbG9zZUNsaWNrKTtcbiAgICB0aGlzLnRyaWdnZXIuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLm9uVHJpZ2dlckNsaWNrKTtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgZGVib3VuY2UodGhpcy5vblJlc2l6ZSkpO1xuICB9XG5cbiAgd2luZG93Lk1vZGFsID0gTW9kYWw7XG59KSgpO1xuIiwiKCgpID0+IHtcbiAgY29uc3QgaXRlbXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuc2VhcmNoJyk7XG4gIGNvbnN0IGNsb3NlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLnNlYXJjaCArIC5zZWFyY2gtY2xvc2UnKTtcblxuICBpdGVtcy5mb3JFYWNoKChpdGVtKSA9PiB7XG4gICAgaXRlbS5hZGRFdmVudExpc3RlbmVyKCdmb2N1cycsICgpID0+e1xuICAgICAgaXRlbS5wYXJlbnROb2RlLnBhcmVudE5vZGUuY2xhc3NMaXN0LmFkZCgnanMtZm9jdXMnKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgaXRlbXMuZm9yRWFjaCgoaXRlbSkgPT4ge1xuICAgIGl0ZW0uYWRkRXZlbnRMaXN0ZW5lcignYmx1cicsICgpID0+IHtcbiAgICAgIGlmIChcbiAgICAgICAgaXRlbS52YWx1ZS5zcGxpdCgnICcpLmpvaW4oJycpID09PSAnJ1xuICAgICAgKSB7XG4gICAgICAgIGl0ZW0udmFsdWUgPSAnJztcbiAgICAgIH1cblxuICAgICAgaWYgKFxuICAgICAgICBpdGVtLnZhbHVlICE9PSAnJ1xuICAgICAgICAmJiAhaXRlbS5jbGFzc0xpc3QuY29udGFpbnMoJ2pzLWlucHV0ZWQnKVxuICAgICAgKSB7XG4gICAgICAgIGl0ZW0uY2xhc3NMaXN0LmFkZCgnanMtaW5wdXRlZCcpO1xuICAgICAgfVxuXG4gICAgICBpZiAoXG4gICAgICAgIGl0ZW0udmFsdWUgPT09ICcnXG4gICAgICAgICYmIGl0ZW0uY2xhc3NMaXN0LmNvbnRhaW5zKCdqcy1pbnB1dGVkJylcbiAgICAgICkge1xuICAgICAgICBpdGVtLmNsYXNzTGlzdC5yZW1vdmUoJ2pzLWlucHV0ZWQnKTtcbiAgICAgIH1cbiAgICB9KVxuICB9KTtcblxuICBjbG9zZS5mb3JFYWNoKChpdGVtKSA9PiB7XG4gICAgaXRlbS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICAgIGNvbnN0IHNlYXJjaCA9IGl0ZW0ucHJldmlvdXNFbGVtZW50U2libGluZztcbiAgICAgIHNlYXJjaC52YWx1ZSA9ICcnO1xuICAgICAgaWYgKFxuICAgICAgICBzZWFyY2guY2xhc3NMaXN0LmNvbnRhaW5zKCdqcy1pbnB1dGVkJylcbiAgICAgICkge1xuICAgICAgICBzZWFyY2guY2xhc3NMaXN0LnJlbW92ZSgnanMtaW5wdXRlZCcpO1xuICAgICAgfVxuICAgIH0pXG4gIH0pO1xufSkoKTtcbiIsIihmdW5jdGlvbigpIHtcbiAgY29uc3QgZm9ybSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5jbG91ZC1zdGF0dXNfX2luc3RhbGxhdGlvbi1mb3JtJyk7XG5cbiAgaWYgKCFmb3JtKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY29uc3QgY29tcGFueSA9IGZvcm0ucXVlcnlTZWxlY3RvcignLmNsb3VkLXN0YXR1c19faW5zdGFsbGF0aW9uLWNvbXBhbnkgaW5wdXQnKTtcblxuICBjb25zdCBmaWxlSW5wdXRCbG9jayA9IGZvcm0ucXVlcnlTZWxlY3RvckFsbCgnLmNsb3VkLXN0YXR1c19faW5zdGFsbGF0aW9uLWZpbGUnKTtcbiAgY29uc3QgZmlsZUlucHV0ID0gZm9ybS5xdWVyeVNlbGVjdG9yKCcuaW5wdXQtZmlsZV9faW5wdXQnKTtcbiAgY29uc3QgZmlsZUNsZWFyID0gZm9ybS5xdWVyeVNlbGVjdG9yKCcuZmlsZS1sb2FkX19jbGVhcicpO1xuXG4gIGNvbnN0IHNlbmRCdG4gPSBmb3JtLnF1ZXJ5U2VsZWN0b3IoJy5jbG91ZC1zdGF0dXNfX2luc3RhbGxhdGlvbi1mb3JtLXNlbmQnKTtcblxuICBjb25zdCBpc0Zvcm1GaWxsZWQgPSBmdW5jdGlvbigpIHtcbiAgICBsZXQgZmlsbGVkID0gdHJ1ZTtcblxuICAgIGlmIChmaWxlSW5wdXQudmFsdWUgPT09ICcnIHx8IGNvbXBhbnkudmFsdWUgPT09ICcnKSB7XG4gICAgICBmaWxsZWQgPSBmYWxzZTtcbiAgICB9IGVsc2Uge1xuICAgICAgZmlsbGVkID0gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gZmlsbGVkO1xuICB9XG5cbiAgY29uc3QgY2hlY2tJbnB1dHMgPSBmdW5jdGlvbigpIHtcbiAgICBpZiAoaXNGb3JtRmlsbGVkKCkpIHtcbiAgICAgIHNlbmRCdG4uaGFzQXR0cmlidXRlKCdkaXNhYmxlZCcpXG4gICAgICAmJiBzZW5kQnRuLnJlbW92ZUF0dHJpYnV0ZSgnZGlzYWJsZWQnKTtcbiAgICB9XG5cbiAgICBpZiAoIWlzRm9ybUZpbGxlZCgpKSB7XG4gICAgICAhc2VuZEJ0bi5oYXNBdHRyaWJ1dGUoJ2Rpc2FibGVkJylcbiAgICAgICYmIHNlbmRCdG4uc2V0QXR0cmlidXRlKCdkaXNhYmxlZCcsICcnKTtcbiAgICB9XG4gIH1cblxuICBjb25zdCBvbkZpbGVDbGVhciA9IGZ1bmN0aW9uKCkge1xuICAgIGlmICghc2VuZEJ0bi5oYXNBdHRyaWJ1dGUoJ2Rpc2FibGVkJykpIHtcbiAgICAgIHNlbmRCdG4uc2V0QXR0cmlidXRlKCdkaXNhYmxlZCcsICcnKTtcbiAgICB9XG4gIH1cblxuICB3aW5kb3cub25JbnN0YWxsYXRpb25GaWxlRHJvcCA9IGZ1bmN0aW9uKCkge1xuICAgIGNoZWNrSW5wdXRzKCk7XG4gIH07XG5cbiAgZmlsZUlucHV0LmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIHdpbmRvdy5vbkluc3RhbGxhdGlvbkZpbGVEcm9wKTtcbiAgZmlsZUNsZWFyLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgb25GaWxlQ2xlYXIpO1xuICBjb21wYW55LmFkZEV2ZW50TGlzdGVuZXIoJ2lucHV0JywgY2hlY2tJbnB1dHMpO1xufSkoKTtcbiIsIigoKSA9PiB7XG4gICQod2luZG93KS5sb2FkKGZ1bmN0aW9uICgpIHtcbiAgICBjb25zdCBzd2lwZXIgPSBuZXcgU3dpcGVyKCcubWVudS1wYV9fY29udGFpbmVyJywge1xuICAgICAgZnJlZU1vZGU6IHRydWUsXG4gICAgICBzbGlkZXNQZXJWaWV3OiAnYXV0bycsXG4gICAgICBicmVha3BvaW50czoge1xuXG4gICAgICAgIDEyODA6IHtcbiAgICAgICAgICBmcmVlTW9kZTogdHJ1ZSxcbiAgICAgICAgICBzbGlkZXNQZXJWaWV3OiAnYXV0bycsXG4gICAgICAgICAgYWxsb3dUb3VjaE1vdmU6IGZhbHNlXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfSk7XG59KSgpO1xuIl19
