"use strict";!function(){var e=document.querySelectorAll(".input-file__label");function t(e){var t=e.querySelector("input"),n=e.parentNode.querySelector(".file-load__clear");function o(e){e.preventDefault(),e.stopPropagation()}function i(t){e.classList.add("highlight")}function l(t){e.classList.remove("highlight")}["dragenter","dragover","dragleave","drop"].forEach((function(t){e.addEventListener(t,o,!1)})),["dragenter","dragover"].forEach((function(t){e.addEventListener(t,i,!1)})),["dragleave","drop"].forEach((function(t){e.addEventListener(t,l,!1)})),e.addEventListener("drop",(function(e){var n=e.dataTransfer.files;t.files&&t.files[0]&&(t.value="",/safari/i.test(navigator.userAgent)||(t.type="",t.type="file"));t.files=n,r()}),!1);var r=function(){s(t)},s=function(t){if(t.files&&t.files[0]){var n=new FileReader;n.onload=function(n){e.parentNode.classList.add("loaded"),e.nextElementSibling.querySelector(".file-load__name").textContent=t.files[0].name,window.onInstallationFileDrop&&window.onInstallationFileDrop()},n.readAsDataURL(t.files[0])}};t.addEventListener("change",r),n.addEventListener("click",(function(){e.parentNode.classList.remove("loaded"),t.value="",/safari/i.test(navigator.userAgent)||(t.type="",t.type="file")}))}window.makeFileLoad=t,e[0]&&e.forEach((function(e){t(e)}))}(),function(){var e=.01*window.innerHeight;document.documentElement.style.setProperty("--vh","".concat(e,"px"));var t,n;window.addEventListener("resize",(t=function(){var e=.01*window.innerHeight;document.documentElement.style.setProperty("--vh","".concat(e,"px"))},function(e){n&&clearTimeout(n),n=setTimeout(t,100,e)}));var o=document.querySelector("body");function i(e,t){this.trigger=e,this.modal=t,this.overlay=this.modal.querySelector(".modal__overlay"),this.closeBtn=this.modal.querySelector(".modal__close"),this.onOverlayClick=this.onOverlayClick.bind(this),this.onCloseClick=this.onCloseClick.bind(this),this.onTriggerClick=this.onTriggerClick.bind(this),this.addEventListeners()}i.prototype.open=function(){this.modal.classList.add("js-show"),o.classList.add("js__body-no-scroll")},i.prototype.close=function(){this.modal.classList.remove("js-show"),o.classList.remove("js__body-no-scroll")},i.prototype.onOverlayClick=function(e){e.target===this.overlay&&this.close()},i.prototype.onCloseClick=function(){this.close()},i.prototype.onTriggerClick=function(){this.open()},i.prototype.addEventListeners=function(){this.overlay.addEventListener("click",this.onOverlayClick),this.closeBtn.addEventListener("click",this.onCloseClick),this.trigger.addEventListener("click",this.onTriggerClick)},window.Modal=i}(),function(){var e=document.querySelectorAll(".input-phone");if(e[0]){var t=new Inputmask("+7(999) 999-99-99");e.forEach((function(e){t.mask(e)}))}}(),function(){var e=document.querySelectorAll(".search"),t=document.querySelectorAll(".search + .search-close");e.forEach((function(e){e.addEventListener("focus",(function(){e.parentNode.parentNode.classList.add("js-focus")}))})),e.forEach((function(e){e.addEventListener("blur",(function(){""===e.value.split(" ").join("")&&(e.value=""),""===e.value||e.classList.contains("js-inputed")||e.classList.add("js-inputed"),""===e.value&&e.classList.contains("js-inputed")&&e.classList.remove("js-inputed")}))})),t.forEach((function(e){e.addEventListener("click",(function(){var t=e.previousElementSibling;t.value="",t.classList.contains("js-inputed")&&t.classList.remove("js-inputed")}))}))}(),$(window).load((function(){new Swiper(".device-actions__slider-container",{freeMode:!0,slidesPerView:"auto"})})),function(){var e=document.querySelector(".cloud-status__installation-form");if(e){var t=e.querySelector(".cloud-status__installation-company input"),n=(e.querySelectorAll(".cloud-status__installation-file"),e.querySelector(".input-file__input")),o=e.querySelector(".file-load__clear"),i=e.querySelector(".cloud-status__installation-form-send"),l=function(){return""!==n.value&&""!==t.value},r=function(){l()&&i.hasAttribute("disabled")&&i.removeAttribute("disabled"),l()||!i.hasAttribute("disabled")&&i.setAttribute("disabled","")};window.onInstallationFileDrop=function(){r()},n.addEventListener("change",window.onInstallationFileDrop),o.addEventListener("click",(function(){i.hasAttribute("disabled")||i.setAttribute("disabled","")})),t.addEventListener("input",r)}}(),function(){var e=document.querySelector(".contract-modal-trigger"),t=document.querySelector(".contract-modal");if(e&&t){new Modal(e,t);$(".contract-modal__toggle-btn").on("click",(function(){$(this).next().slideToggle(),$(this).children(".info-block__toggle-icon").toggleClass("opened")}))}}(),$(window).load((function(){new Swiper(".menu-pa__container",{freeMode:!0,slidesPerView:"auto",breakpoints:{1280:{freeMode:!0,slidesPerView:"auto",allowTouchMove:!1}}})})),function(){var e=document.querySelector(".my-comfort-modal-trigger"),t=document.getElementById("my-comfort-modal");if(e&&t)new Modal(e,t)}(),function(){var e=document.querySelector(".my-comfort-plus-modal-trigger"),t=document.getElementById("my-comfort-plus-modal");if(e&&t)new Modal(e,t)}(),function(){var e=document.querySelector(".my-comfort-premium-modal-trigger"),t=document.getElementById("my-comfort-premium-modal");if(e&&t)new Modal(e,t)}(),$(".first-payment__devices-btn").on("click",(function(){$(this).next().slideToggle(),$(this).children(".first-payment__device-toggle-icon").toggleClass("opened")})),function(){var e=document.querySelector(".subscription-modal-trigger"),t=document.querySelector(".subscription-modal");if(e&&t){new Modal(e,t);$(".subscription-modal__toggle-item-btn").on("click",(function(){$(this).next().slideToggle(),$(this).children(".info-block__toggle-icon").toggleClass("opened")}))}}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
